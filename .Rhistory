print(pd.crosstab(cr_loan["loan_intent"], cr_loan["loan_status"], margins = True))
print(pd.crosstab(cr_loan["person_home_ownership"],[cr_loan["loan_status"],cr_loan["loan_grade"]]))
print(pd.crosstab(cr_loan["person_home_ownership"], cr_loan["loan_status"],
values=cr_loan["loan_percent_income"], aggfunc="mean"))
cr_loan.boxplot(column = ['loan_percent_income'], by = 'loan_status')
plt.title('Average Percent Income by Loan Status')
plt.suptitle('')
plt.show()
pd.crosstab(cr_loan["person_home_ownership"], cr_loan["loan_status"],
values = cr_loan["loan_int_rate"], aggfunc = "mean").round(2)
plt.scatter(cr_loan['person_emp_length'], cr_loan['loan_int_rate'],c='blue', alpha=0.5)
plt.xlabel('Duración de empleo de persona')
plt.ylabel('Tasa de interés del préstamo')
plt.show()
indices = cr_loan[cr_loan["person_emp_length"] >= 60].index
cr_loan.drop(indices, inplace = True)
plt.scatter(cr_loan['person_emp_length'], cr_loan['loan_int_rate'],c='blue', alpha=0.5)
plt.xlabel('Duración de empleo de persona')
plt.ylabel('Tasa de interés del préstamo')
plt.show()
print(pd.crosstab(cr_loan["loan_status"],cr_loan["person_home_ownership"],
values=cr_loan["person_emp_length"], aggfunc="max"))
indices = cr_loan[cr_loan["person_emp_length"] > 60].index
cr_loan_new = cr_loan.drop(indices)
print(pd.crosstab(cr_loan_new['loan_status'],cr_loan_new['person_home_ownership'],
values=cr_loan_new['person_emp_length'], aggfunc=['min','max']))
plt.scatter(cr_loan['person_age'], cr_loan['loan_amnt'], c='blue', alpha=0.5)
plt.xlabel("Person Age")
plt.ylabel("Loan Amount")
plt.show()
cr_loan_new = cr_loan.drop(cr_loan[cr_loan['person_age'] > 100].index)
import matplotlib
import matplotlib.pyplot as plt
colors = ["blue","red"]
plt.scatter(cr_loan_new['person_age'], cr_loan_new['loan_int_rate'],
c = cr_loan_new['loan_status'],
cmap = matplotlib.colors.ListedColormap(colors),
alpha=0.5)
plt.xlabel("Person Age")
plt.ylabel("Loan Interest Rate")
plt.show()
null_columns = cr_loan.columns[cr_loan.isnull().any()]
cr_loan[null_columns].isnull().sum()
cr_loan["loan_int_rate"].fillna((cr_loan["loan_int_rate"].mean()), incplace = True)
cr_loan["loan_int_rate"].fillna((cr_loan["loan_int_rate"].mean()), inplace = True)
null_columns = cr_loan.columns[cr_loan.isnull().any()]
cr_loan[null_columns].isnull().sum()
indices cr_loan["person_emp_length"].isnull().index
cr_loan.drop(indices, inplace = True)
indices = cr_loan["person_emp_length"].isnull().index
cr_loan.drop(indices, inplace = True)
null_columns = cr_loan.columns[cr_loan.isnull().any()]
cr_loan[null_columns].isnull().sum()
print(cr_loan.columns[cr_loan.isnull().any()])
n, bins, patches = plt.hist(cr_loan['person_emp_length'], bins='auto', color='blue')
plt.xlabel("Person Employment Length")
plt.show()
from sklearn.linear_model import LogisticRegression
clf_logistic = LogisticRegression(solver = "lbfgs")
clf_logistic.fit(training_columns, np.ravel(training_labels))
clf_logistic.fit(training_columns, np.ravel(training_labels))
X = cr_loan.drop("loan_status", axis = 1)
y = cr_loan[["loan_status"]]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 4, random_state = 123)
import scikit-learn
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 4, random_state = 123)
from sklear.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 4, random_state = 123)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 4, random_state = 123)
import numpy as np
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 4, random_state = 123)
import numpy as np
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .4, random_state = 123)
import numpy as np
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .4, random_state = 123)
import numpy as np
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= .4,random_state=123)
View(X)
from sklearn.linear_model import LogisticRegression
clf_logistic = LogisticRegression(solver = "lbfgs")
X = cr_loan.drop("loan_status", axis = 1)
y = cr_loan[["loan_status"]]
import numpy as np
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= .4,random_state=123)
cr_loan = pd.read_csv("cr_loan2.csv")
X = cr_loan.drop("loan_status", axis = 1)
y = cr_loan[["loan_status"]]
View(X)
View(y)
import numpy as np
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= .4,random_state=123)
quit
knitr::opts_chunk$set(cache=TRUE)
options(warn=-1)
suppressMessages(library('fpp'))
options(warn=-1)
suppressMessages(library('fpp'))
data(credit)
set.seed(12)
x1 <- runif(500, 0.0, 100.0)
score<-credit$score
defaulted<-function(testing,to_pass) 0.5*to_pass-3>testing
default<-mapply(defaulted,scores,x1)
credit$default<-default
income<-credit$income
row.names(credit) <- NULL
credit[1:8, c("income","default")]
data(credit)
set.seed(12)
x1 <- runif(500, 0.0, 100.0)
score<-credit$score
defaulted<-function(testing,to_pass) 0.5*to_pass-3>testing
default<-mapply(defaulted,scores,x1)
View(credit)
defaulted<-function(testing,to_pass) 0.5*to_pass-3>testing
default<-mapply(defaulted,scores,x1)
scores <-credit$score
defaulted<-function(testing,to_pass) 0.5*to_pass-3>testing
default<-mapply(defaulted,scores,x1)
credit$default<-default
income<-credit$income
row.names(credit) <- NULL
credit[1:8, c("income","default")]
summary(credit[, c("income","default")])
options(digits=4)
modelo_lineal<-lm(!default ~ income)
int<-as.numeric(modelo_lineal$coef['(Intercept)'])
inc<-modelo_lineal$coef['income']
knitr::opts_chunk$set(echo=TRUE)
modelo_lineal<-lm(!default ~ income)
modelo_lineal
View(credit)
knitr::opts_chunk$set(cache=TRUE)
options(warn=-1)
suppressMessages(library('fpp'))
data(credit)
class(credit)
credit <- credit %>% rename("ingreso" = "income",
"pago" = "default")
library(tidyverse)
credit <- credit %>% rename("ingreso" = "income",
"pago" = "default")
credit <- credit %>% rename("ingreso" = "income")
set.seed(12)
x1 <- runif(500, 0.0, 100.0)
scores <-credit$score
defaulted<-function(testing,to_pass) 0.5*to_pass-3>testing
default<-mapply(defaulted,scores,x1)
credit$default<-default
credit$default<-pago
set.seed(12)
x1 <- runif(500, 0.0, 100.0)
scores <-credit$score
defaulted<-function(testing,to_pass) 0.5*to_pass-3>testing
default<-mapply(pago,scores,x1)
set.seed(12)
x1 <- runif(500, 0.0, 100.0)
scores <-credit$score
defaulted<-function(testing,to_pass) 0.5*to_pass-3>testing
default<-mapply(default,scores,x1)
set.seed(12)
x1 <- runif(500, 0.0, 100.0)
scores <-credit$score
pago<-function(testing,to_pass) 0.5*to_pass-3>testing
default<-mapply(pago,scores,x1)
credit$default<-pago
credit$default<- default
income<-credit$ingreso
set.seed(12)
x1 <- runif(500, 0.0, 100.0)
scores <-credit$score
pago<-function(testing,to_pass) 0.5*to_pass-3>testing
pago<-mapply(pago,scores,x1)
credit$default<- pago
income<-credit$ingreso
row.names(credit) <- NULL
credit$default<- pago
income<-credit$ingreso
row.names(credit) <- NULL
credit[1:8, c("ingreso","pago")]
credit$default<- default
income<-credit$ingreso
row.names(credit) <- NULL
credit[1:8, c("ingreso","default")]
summary(credit[, c("ingreso","default")])
options(digits=4)
modelo_lineal<-lm(!default ~ income)
int<-as.numeric(modelo_lineal$coef['(Intercept)'])
inc<-modelo_lineal$coef['ingreso']
knitr::opts_chunk$set(echo=TRUE)
modelo_lineal<-lm(!default ~ income)
modelo_lineal
options(digits=4)
modelo_lineal<-lm(!default ~ income)
int<-as.numeric(modelo_lineal$coef['(Intercept)'])
inc<-modelo_lineal$coef['ingreso']
knitr::opts_chunk$set(echo=TRUE)
modelo_lineal<-lm(!default ~ ingreso)
options(digits=4)
modelo_lineal<-lm(!default ~ ingreso)
options(digits=4)
modelo_lineal<-lm(!default ~ income)
int<-as.numeric(modelo_lineal$coef['(Intercept)'])
inc<-modelo_lineal$coef['ingreso']
knitr::opts_chunk$set(echo=TRUE)
modelo_lineal<-lm(!default ~ income)
modelo_lineal
options(digits=4)
modelo_lineal<-lm(!default ~ ingreso)
default
reticulate::repl_python()
import pandas as pd
cr_loan = pd.read_csv("cr_loan2.csv")
cr_loan.head()
pd.crosstab(cr_loan["person_home_ownership"], cr_loan["loan_status"],
values = cr_loan["loan_int_rate"], aggfunc = "mean").round(2)
import matplotlib.pyplot as plt
plt.scatter(cr_loan["person_income"], cr_loan["loan_int_rate"], c = "blue", alpha = 0.5)
plt.xlabel("Ingreso Personal")
plt.ylabel("Tasa de interés del préstamo")
plt.show()
print(cr_loan.dtypes)
print(cr_loan.head())
n, bin, patches = plt.hist(x = cr_loan["loan_amnt"], bins = "auto", color = "blue", alpha = 0.7, rwidth = 0.85)
plt.xlabel("Monto del préstamo")
plt.show( )
plt.scatter(cr_loan['person_income'], cr_loan['person_age'],c='blue', alpha=0.5)
plt.xlabel('Personal Income')
plt.ylabel('Persone Age')
plt.show()
print(pd.crosstab(cr_loan["loan_intent"], cr_loan["loan_status"], margins = True))
print(pd.crosstab(cr_loan["person_home_ownership"],[cr_loan["loan_status"],cr_loan["loan_grade"]]))
print(pd.crosstab(cr_loan["person_home_ownership"], cr_loan["loan_status"],
values=cr_loan["loan_percent_income"], aggfunc="mean"))
cr_loan.boxplot(column = ['loan_percent_income'], by = 'loan_status')
plt.title('Average Percent Income by Loan Status')
plt.suptitle('')
plt.show()
pd.crosstab(cr_loan["person_home_ownership"], cr_loan["loan_status"],
values = cr_loan["loan_int_rate"], aggfunc = "mean").round(2)
plt.scatter(cr_loan['person_emp_length'], cr_loan['loan_int_rate'],c='blue', alpha=0.5)
plt.xlabel('Duración de empleo de persona')
plt.ylabel('Tasa de interés del préstamo')
plt.show()
indices = cr_loan[cr_loan["person_emp_length"] >= 60].index
cr_loan.drop(indices, inplace = True)
plt.scatter(cr_loan['person_emp_length'], cr_loan['loan_int_rate'],c='blue', alpha=0.5)
plt.xlabel('Duración de empleo de persona')
plt.ylabel('Tasa de interés del préstamo')
plt.show()
print(pd.crosstab(cr_loan["loan_status"],cr_loan["person_home_ownership"],
values=cr_loan["person_emp_length"], aggfunc="max"))
indices = cr_loan[cr_loan["person_emp_length"] > 60].index
cr_loan_new = cr_loan.drop(indices)
print(pd.crosstab(cr_loan_new['loan_status'],cr_loan_new['person_home_ownership'],
values=cr_loan_new['person_emp_length'], aggfunc=['min','max']))
plt.scatter(cr_loan['person_age'], cr_loan['loan_amnt'], c='blue', alpha=0.5)
plt.xlabel("Person Age")
plt.ylabel("Loan Amount")
plt.show()
cr_loan_new = cr_loan.drop(cr_loan[cr_loan['person_age'] > 100].index)
import matplotlib
import matplotlib.pyplot as plt
colors = ["blue","red"]
plt.scatter(cr_loan_new['person_age'], cr_loan_new['loan_int_rate'],
c = cr_loan_new['loan_status'],
cmap = matplotlib.colors.ListedColormap(colors),
alpha=0.5)
plt.xlabel("Person Age")
plt.ylabel("Loan Interest Rate")
plt.show()
null_columns = cr_loan.columns[cr_loan.isnull().any()]
cr_loan[null_columns].isnull().sum()
cr_loan["loan_int_rate"].fillna((cr_loan["loan_int_rate"].mean()), inplace = True)
null_columns = cr_loan.columns[cr_loan.isnull().any()]
cr_loan[null_columns].isnull().sum()
indices = cr_loan["person_emp_length"].isnull().index
cr_loan.drop(indices, inplace = True)
null_columns = cr_loan.columns[cr_loan.isnull().any()]
cr_loan[null_columns].isnull().sum()
from sklearn.linear_model import LogisticRegression
clf_logistic = LogisticRegression(solver = "lbfgs")
import pandas as pd
cr_loan = pd.read_csv("cr_loan2.csv")
X = cr_loan.drop("loan_status", axis = 1)
y = cr_loan[["loan_status"]]
import numpy as np
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= .4,random_state=123)
X = cr_loan[["loan_int_rate"]]
y = cr_loan[["loan_status"]]
clf_logistic_single = LogisticRegression(solve='lbfgs')
clf_logistic_single.fit(X, np.ravel(y))
clf_logistic_single = LogisticRegression(solve='lbfgs')
#clf_logistic_single.fit(X, np.ravel(y))
clf_logistic_single = LogisticRegression(solver ='lbfgs')
#clf_logistic_single.fit(X, np.ravel(y))
clf_logistic_single = LogisticRegression(solver ='lbfgs')
clf_logistic_single.fit(X, np.ravel(y))
cr_loan_clean = pd.read_csv("cr_loan_clean.csv")
X = cr_loan_clean[["loan_int_rate"]]
y = cr_loan_clean[["loan_status"]]
cr_loan_clean = pd.read_csv("cr_loan_w2.csv")
X = cr_loan_clean[["loan_int_rate"]]
y = cr_loan_clean[["loan_status"]]
clf_logistic_single = LogisticRegression(solver ='lbfgs')
clf_logistic_single.fit(X, np.ravel(y))
print(clf_logistic_single.get_params())
print(clf_logistic_single.intercept_)
X_multi = cr_loan_clean[["loan_int_rate", "person_emp_length"]]
y = cr_loan_clean[["loan_status"]]
clf_logistic_multi = LogisticRegression(solver='lbfgs').fit(X_multi, np.ravel(y))
print(clf_logistic_multi.intercept_)
X = cr_loan_clean[['loan_int_rate','person_emp_length','person_income']]
y = cr_loan_clean[['loan_status']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.4, random_state=123)
clf_logistic = LogisticRegression(solver='lbfgs').fit(X_train, np.ravel(y_train))
print(clf_logistic.coef_)
cr_loan_clean["loan_intent"]
cr_loan["loan_intent"]
# separamos las columnas numéricas
cred_num = cr_loan.select_dtypes(exclude = ["object"])
# separamos las columnas numéricas
cred_num = cr_loan.select_dtypes(exclude = ["object"])
# separamos las columnas numéricas
cred_num = cr_loan.select_dtypes(exclude = ["object"])
cred_num
# separamos las columnas numéricas
cred_num = cr_loan.select_dtypes(exclude = ["object"])
cred_num.head()
# Separamos las columnas no numéricas
cred_cat = cr_loan.select_dtypes(include = ["object"])
cred_cat.head()
# One-hot a columnas no numéricas
cred_cat_onehot = pd.get_dummies(cred_cat)
# One-hot a columnas no numéricas
cred_cat_onehot = pd.get_dummies(cred_cat)
cred_cat_onehot.head()
cr_loan = pd.concat([cred_num, cred_cat_onehot], axis = 1)
cred_num = cr_loan_clean.select_dtypes(exclude=['object'])
cred_str = cr_loan_clean.select_dtypes(include=['object'])
cred_str_onehot = pd.get_dummies(cred_str)
cred_str_onehot = pd.get_dummies(cred_str)
cred_num = cr_loan_clean.select_dtypes(exclude=['object'])
cred_str = cr_loan_clean.select_dtypes(include=['object'])
cred_str_onehot = pd.get_dummies(cred_str)
cred_num = cr_loan_clean.select_dtypes(exclude = ['object'])
cred_str = cr_loan_clean.select_dtypes(include = ['object'])
cred_str_onehot = pd.get_dummies(cred_str)
cred_num = cr_loan_clean.select_dtypes(exclude = ['object'])
cred_str = cr_loan_clean.select_dtypes(include = ['object'])
cred_str
cr_loan_prep = pd.concat([cred_num, cred_cat_onehot], axis = 1)
cr_loan_prep.head()
print(cr_loan_prep.columns)
cr_loan_prep = pd.concat([cred_num, cred_cat_onehot], axis = 1)
cr_loan_prep.head()
cr_loan_clean = pd.read_csv("cr_loan_w2.csv")
X = cr_loan_clean[["loan_intent_DEBTCONSOLIDATION", "loan_intent_EDUCATION", "loan_intent_HOMEIMPROVEMENT", "loan_intent_MEDICAL", "loan_intent_PERSONAL","loan_intent_VENTURE"]]
y = cr_loan_clean[["loan_status"]]
cr_loan_clean = pd.read_csv("cr_loan_w2.csv")
X = cr_loan_clean[["loan_intent_DEBTCONSOLIDATION", "loan_intent_EDUCATION", "loan_intent_HOMEIMPROVEMENT", "loan_intent_MEDICAL", "loan_intent_PERSONAL","loan_intent_VENTURE"]]
y = cr_loan_clean[["loan_status"]]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= .4,random_state=123)
clf_logistic = LogisticRegression(solver='lbfgs').fit(X_train, np.ravel(y_train))
preds = clf_logistic.predict_proba(X_test)
preds = clf_logistic.predict_proba(X_test)
preds
preds_df = pd.DataFrame(preds[:,1][0:5], columns = ['prob_default'])
true_df = y_test.head()
print(pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1))
preds = clf_logistic.predict_proba(X_test)
preds.head()
preds = clf_logistic.predict_proba(X_test)
preds = clf_logistic.predict_proba(X_test)
preds[:,1][0:5]
preds = clf_logistic.predict_proba(X_test)
preds[:,1][0:10]
preds = clf_logistic.predict_proba(X_test)
preds[:,1][0:5]
cr_loan_clean = pd.read_csv("cr_loan_w2.csv")
X = cr_loan_clean[["loan_intent_DEBTCONSOLIDATION", "loan_intent_EDUCATION", "loan_intent_HOMEIMPROVEMENT", "loan_intent_MEDICAL", "loan_intent_PERSONAL","loan_intent_VENTURE",
"person_income"]]
y = cr_loan_clean[["loan_status"]]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= .4,random_state=123)
clf_logistic = LogisticRegression(solver='lbfgs').fit(X_train, np.ravel(y_train))
preds = clf_logistic.predict_proba(X_test)
preds_df = pd.DataFrame(preds[:,1][0:5], columns = ['prob_default'])
true_df = y_test.head()
print(pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1))
cr_loan_clean = pd.read_csv("cr_loan_w2.csv")
X = cr_loan_clean[["loan_intent_DEBTCONSOLIDATION", "loan_intent_EDUCATION", "loan_intent_HOMEIMPROVEMENT", "loan_intent_MEDICAL", "loan_intent_PERSONAL","loan_intent_VENTURE"]]
y = cr_loan_clean[["loan_status"]]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= .4,random_state=123)
clf_logistic = LogisticRegression(solver='lbfgs').fit(X_train, np.ravel(y_train))
preds = clf_logistic.predict_proba(X_test)
preds = clf_logistic.predict_proba(X_test)
preds_df = pd.DataFrame(preds[:,1][0:5], columns = ['prob_default'])
true_df = y_test.head()
print(pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1))
cr_loan_clean = pd.read_csv("cr_loan_w2.csv")
X = cr_loan_clean[["loan_intent_DEBTCONSOLIDATION", "loan_intent_EDUCATION", "loan_intent_HOMEIMPROVEMENT", "loan_intent_MEDICAL", "loan_intent_PERSONAL","loan_intent_VENTURE",
"person_income", "loan_amnt"]]
y = cr_loan_clean[["loan_status"]]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= .4,random_state=123)
clf_logistic = LogisticRegression(solver='lbfgs').fit(X_train, np.ravel(y_train))
preds = clf_logistic.predict_proba(X_test)
preds_df = pd.DataFrame(preds[:,1][0:5], columns = ['prob_default'])
true_df = y_test.head()
print(pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1))
preds_df = pd.DataFrame(preds, columns = ['prob_default'])
true_df = y_test.head()
cr_loan_clean = pd.read_csv("cr_loan_w2.csv")
X = cr_loan_clean[["loan_intent_DEBTCONSOLIDATION", "loan_intent_EDUCATION", "loan_intent_HOMEIMPROVEMENT", "loan_intent_MEDICAL", "loan_intent_PERSONAL","loan_intent_VENTURE",
"person_income", "loan_amnt"]]
y = cr_loan_clean[["loan_status"]]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= .4,random_state=123)
clf_logistic = LogisticRegression(solver='lbfgs').fit(X_train, np.ravel(y_train))
preds = clf_logistic.predict_proba(X_test)
preds_df = pd.DataFrame(preds, columns = ['prob_default'])
true_df = y_test.head()
preds_df = pd.DataFrame(preds[:,1][0:10], columns = ['prob_default'])
true_df = y_test.head()
print(pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1))
preds_df = pd.DataFrame(preds[:,1][0:5], columns = ['prob_default'])
true_df = y_test.head()
print(pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1))
cr_loan_clean = pd.read_csv("cr_loan_w2.csv")
X = cr_loan_clean[["loan_intent_DEBTCONSOLIDATION", "loan_intent_EDUCATION", "loan_intent_HOMEIMPROVEMENT", "loan_intent_MEDICAL", "loan_intent_PERSONAL","loan_intent_VENTURE",
"person_income", "loan_amnt", "loan_int_rate"]]
y = cr_loan_clean[["loan_status"]]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= .4,random_state=123)
clf_logistic = LogisticRegression(solver='lbfgs').fit(X_train, np.ravel(y_train))
preds = clf_logistic.predict_proba(X_test)
preds = clf_logistic.predict_proba(X_test)
preds_df = pd.DataFrame(preds[:,1][0:5], columns = ['prob_default'])
true_df = y_test.head()
print(pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1))
cr_loan_clean = pd.read_csv("cr_loan_w2.csv")
X = cr_loan_clean[["loan_intent_DEBTCONSOLIDATION", "loan_intent_EDUCATION", "loan_intent_HOMEIMPROVEMENT", "loan_intent_MEDICAL", "loan_intent_PERSONAL","loan_intent_VENTURE"]]
y = cr_loan_clean[["loan_status"]]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= .4,random_state=123)
clf_logistic = LogisticRegression(solver='lbfgs').fit(X_train, np.ravel(y_train))
preds = clf_logistic.predict_proba(X_test)
preds_df = pd.DataFrame(preds[:,1][0:5], columns = ['prob_default'])
true_df = y_test.head()
print(pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1))
print(pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1))
cr_loan_clean = pd.read_csv("cr_loan_w2.csv")
X = cr_loan_clean[["loan_intent_DEBTCONSOLIDATION", "loan_intent_EDUCATION", "loan_intent_HOMEIMPROVEMENT", "loan_intent_MEDICAL", "loan_intent_PERSONAL","loan_intent_VENTURE","person_home_ownership_MORTGAGE","person_home_ownership_OTHER","person_home_ownership_OWN", "person_home_ownership_RENT"]]
y = cr_loan_clean[["loan_status"]]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= .4,random_state=123)
clf_logistic = LogisticRegression(solver='lbfgs').fit(X_train, np.ravel(y_train))
clf_logistic = LogisticRegression(solver='lbfgs').fit(X_train, np.ravel(y_train))
preds = clf_logistic.predict_proba(X_test)
preds_df = pd.DataFrame(preds[:,1][0:5], columns = ['prob_default'])
true_df = y_test.head()
print(pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1))
print(clf_logistic.coef_)
print(clf_logistic.intercep_)
print(clf_logistic.intercept_)
preds = clf_logistic.predict_proba(X_test)
preds_df = pd.DataFrame(preds[:,1][0:10], columns = ['prob_default'])
true_df = y_test.head()
print(pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1))
preds = clf_logistic.predict_proba(X_test)
preds
preds = clf_logistic.predict_proba(X_test)
len(preds)
preds[:,1][0:10]
clf_logistic.score(X_test, y_test)
fallout, sensitivity, thresholds = roc_curve(y_test,prob_default)
from sklearn.metrics import roc_curve
fallout, sensitivity, thresholds = roc_curve(y_test,prob_default)
from sklearn.metrics import roc_curve
resultados = pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1)
#fallout, sensitivity, thresholds = roc_curve(y_test,prob_default)
from sklearn.metrics import roc_curve
resultados = pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1)
prob_default = resultados["prob_default"]
#fallout, sensitivity, thresholds = roc_curve(y_test,prob_default)
from sklearn.metrics import roc_curve
resultados = pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1)
prob_default = resultados["prob_default"]
prob_default.head()
#fallout, sensitivity, thresholds = roc_curve(y_test,prob_default)
from sklearn.metrics import roc_curve
resultados = pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1)
prob_default = resultados["prob_default"]
fallout, sensitivity, thresholds = roc_curve(y_test,prob_default)
from sklearn.metrics import roc_curve
resultados = pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1)
prob_default = resultados["prob_default"]
y_test.head()
#fallout, sensitivity, thresholds = roc_curve(y_test,prob_default)
from sklearn.metrics import roc_curve
resultados = pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1)
prob_default = resultados["prob_default"]
len(y_test)
#fallout, sensitivity, thresholds = roc_curve(y_test,prob_default)
from sklearn.metrics import roc_curve
resultados = pd.concat([true_df.reset_index(drop = True), preds_df], axis = 1)
prob_default = resultados["prob_default"]
len(prob_default)
#fallout, sensitivity, thresholds = roc_curve(y_test,prob_default)
